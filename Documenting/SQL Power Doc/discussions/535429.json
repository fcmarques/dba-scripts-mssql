[
  {
    "Id": "1214699",
    "ThreadId": "535429",
    "Html": "When I execute Get-SQLServerInventoryTOClixml.ps1 I receive this message.  Is there an override to use the newest?  For my SQL 2012 servers I am getting limited information on them, and I believe this is the cause.\r<br />\n<br />\nThank you.\r<br />\n--JD<br />\n",
    "PostedDate": "2014-02-25T09:29:19.267-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1219559",
    "ThreadId": "535429",
    "Html": "Hi Jim,\r<br />\nSQL Power Doc was written to be agnostic to the version of SMO but as you've noticed if multiple versions are present you'll get the warning dialog - this is a safety net to avoid throwing errors when methods that aren't found in earlier versions are called.\r<br />\n<br />\nIf you want to force a specific version of SMO to be loaded you'll have to modify code in a few places. Note the examples below are specific to SMO for SQL 2012.\r<br />\n<br />\nIn SqlServerDatabaseEngineInformation.psm1 at the end of the file, replace<br />\n<pre><code># Load SMO assembly, and if we're running SQL 2008 DLLs or higher load the SMOExtended and SQLWMIManagement libraries\n[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | ForEach-Object {\n    $SmoMajorVersion = $_.GetName().Version.Major\n    [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SQLEnum') | Out-Null\n    if ($SmoMajorVersion -ge 10) {\n        [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMOExtended') | Out-Null\n        [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SQLWMIManagement') | Out-Null\n    }\n}\n\n# Now check which SMO assemblies are loaded and set $SmoMajorVersion to the lowest version\n[System.AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.FullName -ilike 'Microsoft.SqlServer.SMO, Version=*' } | ForEach-Object {\n    if ($_.GetName().Version.Major -lt $SmoMajorVersion) {\n        $SmoMajorVersion = $_.GetName().Version.Major\n        Write-SqlServerDatabaseEngineInformationLog -Message &quot;Multiple versions of Microsoft.SqlServer.SMO are loaded; reverting to the lowest version to avoid problems&quot; -MessageLevel Warning\n    }\n}</code></pre>\n\nwith<br />\n<pre><code># Load SMO assembly, and if we're running SQL 2008 DLLs or higher load the SMOExtended and SQLWMIManagement libraries\n$SmoAssemblyPath = 'C:\\WINDOWS\\assembly\\GAC_MSIL\\Microsoft.SqlServer.SMO\\11.0.0.0__89845dcd8080cc91\\Microsoft.SqlServer.SMO.dll'\n$SQLEnumAssemblyPath = 'C:\\WINDOWS\\assembly\\GAC_MSIL\\Microsoft.SqlServer.SQLEnum\\11.0.0.0__89845dcd8080cc91\\Microsoft.SqlServer.SQLEnum.dll'\n$SMOExtendedAssemblyPath = 'C:\\WINDOWS\\assembly\\GAC_MSIL\\Microsoft.SqlServer.SMOExtended\\11.0.0.0__89845dcd8080cc91\\Microsoft.SqlServer.SMOExtended.dll'\n$SQLWMIManagementAssemblyPath = 'C:\\WINDOWS\\assembly\\GAC_MSIL\\Microsoft.SqlServer.SQLWMIManagement\\11.0.0.0__89845dcd8080cc91\\Microsoft.SqlServer.SQLWMIManagement.dll'\n\n\n[System.Reflection.Assembly]::LoadFrom($SmoAssemblyPath) | ForEach-Object {\n    $SmoMajorVersion = $_.GetName().Version.Major\n    [System.Reflection.Assembly]::LoadFrom($SQLEnumAssemblyPath) | Out-Null\n    if ($SmoMajorVersion -ge 10) {\n        [System.Reflection.Assembly]::LoadFrom($SMOExtendedAssemblyPath) | Out-Null\n        [System.Reflection.Assembly]::LoadFrom($SQLWMIManagementAssemblyPath) | Out-Null\n    }\n}\n\n# Now check which SMO assemblies are loaded and set $SmoMajorVersion to the lowest version\n[System.AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.FullName -ilike 'Microsoft.SqlServer.SMO, Version=*' } | ForEach-Object {\n    if ($_.GetName().Version.Major -lt $SmoMajorVersion) {\n        $SmoMajorVersion = $_.GetName().Version.Major\n        Write-SqlServerDatabaseEngineInformationLog -Message &quot;Multiple versions of Microsoft.SqlServer.SMO are loaded; reverting to the lowest version to avoid problems&quot; -MessageLevel Warning\n    }\n}</code></pre>\n\nAnd in NetworkScan.psm1, starting at around line 1293 (depending on the version you're running), replace<br />\n<pre><code># Load SMO Assemblies\n[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | ForEach-Object {\n    if ($_.GetName().Version.Major -ge 10) {\n        [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMOExtended') | Out-Null\n        [System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SQLWMIManagement') | Out-Null\n    }\n}</code></pre>\n\nwith<br />\n<pre><code># Load SMO Assemblies\n$SmoAssemblyPath = 'C:\\WINDOWS\\assembly\\GAC_MSIL\\Microsoft.SqlServer.SMO\\11.0.0.0__89845dcd8080cc91\\Microsoft.SqlServer.SMO.dll'\n$SQLEnumAssemblyPath = 'C:\\WINDOWS\\assembly\\GAC_MSIL\\Microsoft.SqlServer.SQLEnum\\11.0.0.0__89845dcd8080cc91\\Microsoft.SqlServer.SQLEnum.dll'\n$SMOExtendedAssemblyPath = 'C:\\WINDOWS\\assembly\\GAC_MSIL\\Microsoft.SqlServer.SMOExtended\\11.0.0.0__89845dcd8080cc91\\Microsoft.SqlServer.SMOExtended.dll'\n$SQLWMIManagementAssemblyPath = 'C:\\WINDOWS\\assembly\\GAC_MSIL\\Microsoft.SqlServer.SQLWMIManagement\\11.0.0.0__89845dcd8080cc91\\Microsoft.SqlServer.SQLWMIManagement.dll'\n\n[System.Reflection.Assembly]::LoadFrom($SmoAssemblyPath) | ForEach-Object {\n    $SmoMajorVersion = $_.GetName().Version.Major\n    [System.Reflection.Assembly]::LoadFrom($SQLEnumAssemblyPath) | Out-Null\n    if ($SmoMajorVersion -ge 10) {\n        [System.Reflection.Assembly]::LoadFrom($SMOExtendedAssemblyPath) | Out-Null\n        [System.Reflection.Assembly]::LoadFrom($SQLWMIManagementAssemblyPath) | Out-Null\n    }\n}</code></pre>\n\nThe specific paths to your assemblies may be different depending on what version you're running and how your system is set up. Let me know if you run into any problems putting this in place.\r<br />\n<br />\n--Kendal<br />\n",
    "PostedDate": "2014-03-05T09:22:21.833-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]